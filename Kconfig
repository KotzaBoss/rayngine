mainmenu "Project Configuration"


config VERBOSE
	bool "Verbose"


choice BUILD
    prompt "Build type"

    config BUILD_DEBUG
        bool "Debug"
    config BUILD_RELEASE
        bool "Release"
endchoice


menu "Sanitizers"
	choice SANITIZE_MEMORY_CHOICE
		prompt "Sanatize memory"
		optional
		help
			Unfortunately the name of one of the "memory" sanitizers is "Memory sanitizer"...
			Ignoring that, either "Memory" or "Address" sanitizer can be used not both.
			See their "help" for details.

		config SANITIZE_ADDRESS
			bool "Address sanitizer"
			help
				https://github.com/google/sanitizers/wiki/AddressSanitizer

		config SANITIZE_MEMORY
			bool "Memory sanitizer"
			help
				https://github.com/google/sanitizers/wiki/MemorySanitizer
	endchoice


	config SANITIZE_THREAD
		bool "Thread sanatizer"
		help
			https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual
endmenu


config ODIN_COLLECTION
	string "Where is the -collection:rayngine"
	default "${PROJECT_SOURCE_DIR}/src"


menu "Resources"
	config RESOURCE_DIR
		string "Directory to look for resources"
		default "${CMAKE_BINARY_DIR}/res"

	config MINI_SPACE_PACK_DIR
		string
		default "${RAYNGINE_RESOURCE_DIR}/Mini_space_pack"
endmenu

# Left as a comment if you need to remember the pattern
#menu "Compiler"
#
#	menu "Warnings"
#		config HAVE_COMPILER_WARNING_ALL
#		    bool "-Wall"
#		    default y
#		config COMPILER_WARNING_ALL
#			string
#			default "-Wall" if HAVE_COMPILER_WARNING_ALL
#
#		config HAVE_COMPILER_WARNING_EXTRA
#		    bool "-Wextra"
#		    default y
#		config COMPILER_WARNING_EXTRA
#			string
#			default "-Wextra" if HAVE_COMPILER_WARNING_EXTRA
#
#		config HAVE_COMPILER_WARNING_PEDANTIC
#		    bool "-Wpedantic"
#		    default y
#		config COMPILER_WARNING_PEDANTIC
#			string
#			default "-Wpedantic" if HAVE_COMPILER_WARNING_PEDANTIC
#
#		config HAVE_COMPILER_WARNING_EFFECTIVE_CPP
#		    bool "-Weffc++"
#		    default y
#		config COMPILER_WARNING_EFFECTIVE_CPP
#			string
#			default "-Weffc++" if HAVE_COMPILER_WARNING_EFFECTIVE_CPP
#	endmenu
#
#
#	choice
#		prompt "Release mode optimizations"
#		depends on BUILD_RELEASE
#
#	    config HAVE_COMPILER_OPTIMIZATION_0
#			bool "-O0"
#	    config HAVE_COMPILER_OPTIMIZATION_1
#	        bool "-O1"
#		config HAVE_COMPILER_OPTIMIZATION_2
#	        bool "-O2"
#		config HAVE_COMPILER_OPTIMIZATION_3
#	        bool "-O3"
#	endchoice
#
#	config HAVE_COMPILER_OPTIMIZATION_DEBUGGING
#	    bool "Debug mode optimizations -Og"
#		default y
#		depends on BUILD_DEBUG
#
#	config COMPILER_OPTIMIZATIONS
#		string
#		default "-O1" if HAVE_COMPILER_OPTIMIZATION_1
#		default "-O2" if HAVE_COMPILER_OPTIMIZATION_2
#		default "-O3" if HAVE_COMPILER_OPTIMIZATION_3
#		default "-Og" if HAVE_COMPILER_OPTIMIZATION_DEBUGGING
#
#
#	choice
#		prompt "Debug info"
#		depends on BUILD_DEBUG
#
#		config HAVE_COMPILER_DEBUG_INFO_GDB
#			bool "-ggdb3"
#		config HAVE_COMPILER_DEBUG_INFO_GENERAL
#			bool "-g3"
#	endchoice
#
#	config COMPILER_DEBUG_INFO
#		string
#		depends on BUILD_DEBUG
#		default "-ggdb3" if HAVE_COMPILER_DEBUG_INFO_GDB
#		default "-g3" if HAVE_COMPILER_DEBUG_INFO_GENERAL
#
#
#	menu "Sanitizers"
#		config HAVE_COMPILER_SANITIZER_UNDEFINED
#			bool "Undefined sanitizer"
#			default y if BUILD_DEBUG
#		config COMPILER_SANITIZER_UNDEFINED
#			string
#			default "-fsanitize=undefined" if HAVE_COMPILER_SANITIZER_UNDEFINED
#
#		config HAVE_COMPILER_SANITIZER_ADDRESS
#			bool "Address sanitizer"
#			default y if BUILD_DEBUG
#		config COMPILER_SANITIZER_ADDRESS
#			string
#			default "-fsanitize=address" if HAVE_COMPILER_SANITIZER_ADDRESS
#	endmenu
#
#
#	# New configs here ...
#
#
#	config COMPILER_FLAGS_OTHER
#	    string
#	    prompt "Other flags"
#		help
#			Meant to be used to test new flags. It is recommended to add
#			explicit Kconfig configs when these flags are ready to be used.
#
#endmenu
